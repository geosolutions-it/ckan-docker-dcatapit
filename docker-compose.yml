version: "3.9"

# Common template for CKAN services below
x-common-ckan:
  &default-common-ckan
  restart: unless-stopped
  env_file:
    - .env

services:

  db:
    << : *default-common-ckan
    image: ${COMPOSE_PROJECT_NAME}-dcatapit_postgis:latest
    container_name: ${COMPOSE_PROJECT_NAME}-db
    build:
      context: ./docker/db/
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      start_period: 60s
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - db:/var/lib/postgresql/data

  solr:
    << : *default-common-ckan
    image: ${COMPOSE_PROJECT_NAME}-dcatapit_solr:latest
    container_name: ${COMPOSE_PROJECT_NAME}-solr
    build:
      context: ./docker/solr/
    healthcheck:
      test: curl --max-time 10 -f http://localhost:8983 || exit 1
      start_period: 60s
      interval: 10s
      timeout: 10s
      retries: 5
    volumes:
      - solr-data:/opt/solr/server/solr/ckan/data

  redis:
    << : *default-common-ckan
    image: "redis:alpine"
    container_name: ${COMPOSE_PROJECT_NAME}-redis
    healthcheck:
      test: redis-cli ping
      interval: 5s
      timeout: 5s
      retries: 5

  ckan:
    << : *default-common-ckan
    image: ${COMPOSE_PROJECT_NAME}-dcatapit_ckan:latest
    container_name: ${COMPOSE_PROJECT_NAME}-ckan
    build:
      context: ./docker/ckan/
    cap_add:
      - SYS_PTRACE
    depends_on:
      solr:
        condition: service_healthy
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "${CKAN_PORT:-5000}:5000"
    volumes:
      - ckan-data:/var/lib/ckan
      - ckan-config:/etc/ckan
      - ckan-logs:/var/log/ckan
      - ./pycsw.cfg:/etc/pycsw/pycsw.cfg      
    healthcheck:
      test: curl --max-time 10 -f http://localhost:5000/api/3 || exit 1
      start_period: 180s
      interval: 10s
      timeout: 10s
      retries: 5

  gather_consumer:
    << : *default-common-ckan
    image: ${COMPOSE_PROJECT_NAME}-dcatapit_ckan:latest
    container_name: ${COMPOSE_PROJECT_NAME}-gather
    depends_on:
      ckan:
        condition: service_healthy
    entrypoint: /consumer-entrypoint.sh
    volumes:
      - ckan-data:/var/lib/ckan
      - ckan-config:/etc/ckan
      - ckan-logs:/var/log/ckan
      - ./docker/ckan/ckan_harvesting_gather.conf:/etc/supervisor/conf.d/ckan_harvesting.conf

  fetch_consumer:
    << : *default-common-ckan
    image: ${COMPOSE_PROJECT_NAME}-dcatapit_ckan:latest
    container_name: ${COMPOSE_PROJECT_NAME}-fetch
    depends_on:
      ckan:
        condition: service_healthy
    entrypoint: /consumer-entrypoint.sh
    volumes:
      - ckan-data:/var/lib/ckan
      - ckan-config:/etc/ckan
      - ckan-logs:/var/log/ckan
      - ./docker/ckan/ckan_harvesting_fetch.conf:/etc/supervisor/conf.d/ckan_harvesting.conf

  datapusher:
    << : *default-common-ckan
    container_name: ${COMPOSE_PROJECT_NAME}-datapusher
    image: keitaro/ckan-datapusher:latest
    healthcheck:
      test: curl --max-time 10 -f http://localhost:8000
      start_period: 60s      
      interval: 10s
      timeout: 10s
      retries: 5

  pycsw:
    << : *default-common-ckan
    container_name: ${COMPOSE_PROJECT_NAME}-pycsw
    image: ${COMPOSE_PROJECT_NAME}-pycsw:latest
    build:
      context: ./docker/pycsw/
    depends_on:
      # we need the ckan entrypoint to create the pycsw tables with required extra fields
      ckan:
        condition: service_healthy      
    ports:
      - ${PYCSW_PORT:-8000}:8000
    volumes:
      - ./pycsw.cfg:/etc/pycsw/pycsw.cfg
    healthcheck:
      test: curl --max-time 10 -f http://localhost:8000/ || exit 1
      start_period: 20s
      interval: 10s
      timeout: 10s
      retries: 5      

  proxy:
    << : *default-common-ckan
    image: ghcr.io/linuxserver/swag:latest
    container_name: ${COMPOSE_PROJECT_NAME}-proxy
    cap_add:
      - NET_ADMIN
    volumes:
      - proxy-config:/config
      - ./site-confs/default:/config/nginx/site-confs/default
    ports:
      - "443:443"
      - "80:80" #optional
    healthcheck:
      test: curl --max-time 10 -f http://localhost:80
      interval: 10s
      timeout: 10s
      retries: 5

volumes:
  proxy-config:
  ckan-data:
  ckan-config:
  ckan-logs:
  solr-data:
  db:
